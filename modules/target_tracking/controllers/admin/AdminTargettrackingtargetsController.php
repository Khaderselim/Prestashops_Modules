<?php
require_once _PS_MODULE_DIR_ . 'target_tracking/classes/TargetWebsite.php';
require_once _PS_MODULE_DIR_ . 'target_tracking/classes/Competitor.php';
require_once _PS_MODULE_DIR_ . 'target_tracking/classes/TargetCompetitorRelation.php';
require_once _PS_MODULE_DIR_ . 'target_tracking/classes/Categories.php';

class AdminTargettrackingtargetsController extends ModuleAdminController
{
    /**
     * @throws PrestaShopException
     * This constructor initializes the AdminTargettrackingtargetsController class.
     * It sets up the table name, class name, and other properties for the controller.
     * It also initializes the fields list for the target websites.
     */
    public function __construct()
    {
        $this->bootstrap = true;
        $this->table = 'target_websites';
        $this->className = 'TargetWebsite';
        $this->lang = false;
        $this->identifier = 'id_target_website';
        $this->orderBy = 'id_target_website';
        $this->orderWay = 'ASC';
        $this->list_no_link = true; // Disable default link to edit targets

        parent::__construct();
        // Declare the fields for the list of target websites
        $this->fields_list = array(
            'id_target_website' => array(
                'title' => $this->l('ID'),
                'align' => 'center',
                'width' => 25
            ),
            'name' => array(
                'title' => $this->l('Name'),
                'width' => 'auto',
                'callback' => 'displayName',
                'align' => 'left',
                'class' => 'fixed-width-md',
            ),
            'logo' => array(
                'title' => $this->l('Logo'),
                'callback' => 'displayLogo',
                'align' => 'center',
                'search' => false
            ),
            'url' => array(
                'title' => $this->l('URL'),
                'align' => 'left',
                'width' => 'auto',
                'callback' => 'displayURLLink',
                'filter_key' => 'a!url',
                'filter_type' => 'text',
                'orderby' => true
            ),
            'competitors' => array(
                'title' => $this->l('Competitors'),
                'align' => 'left',
                'search' => false,
                'orderby' => false
            ),
            'active' => array(
                'title' => $this->l('Status'),
                'align' => 'center',
                'active' => 'status',
                'type' => 'bool'
            )
        );
        $this->addRowAction('edit');
        $this->addRowAction('delete');

    }

    /**
     * This method initializes the toolbar for the admin controller.
     * It sets up the catalog filter and assigns it to the template.
     */
    public function initToolbar()
    {
        //Get all the categories
        $catalogs = Db::getInstance()->executeS('
            SELECT id_target_catalog, name, value
            FROM ' . _DB_PREFIX_ . 'target_catalog
            WHERE active = 1
            ORDER BY name ASC'
        );
        // Get selected catalogs based on bitwise value
        $selected_catalogs = (int)Tools::getValue('catalog_filter', 0);
        //Send the selected catalogs to the template
        $this->context->smarty->assign(array(
            'catalogs' => $catalogs,
            'selected_catalogs' => $selected_catalogs,
            'currentIndex' => self::$currentIndex,
            'token' => $this->token
        ));
        // Assign the catalog filter HTML to the template
        $this->context->smarty->assign(array(
            'catalog_filter_html' => $this->context->smarty->fetch(
                _PS_MODULE_DIR_ . 'target_tracking/views/templates/admin/catalog_filter_fields.tpl'
            )
        ));
    }

    /**
     * @return void
     * This method initializes the page header toolbar for the admin controller.
     * It sets up the toolbar buttons and assigns them to the template.
     */
    public function initPageHeaderToolbar()
    {
        parent::initPageHeaderToolbar(); // TODO: Change the autogenerated stub
        if (Tools::getValue('addtarget_websites') === false && Tools::getValue('updatetarget_websites') === false) {
            $this->page_header_toolbar_btn['new'] = [
                'href' => self::$currentIndex . '&add' . $this->table . '&token=' . $this->token,
                'desc' => $this->trans('Add new Target', [], 'Admin.Actions'),
                'icon' => 'process-icon-new'
            ];
        }
    }

    /**
     * @return string The rendered form HTML
     * This method renders the form for adding or editing target websites.
     * It sets up the fields for the form, including name, URL, categories, competitors, and status.
     * It also assigns the list of competitors to the template.
     */
    public function renderForm()
    {
        $object = $this->loadObject(true);
        $catalogs = Db::getInstance()->executeS('
        SELECT id_target_catalog, name, value
        FROM ' . _DB_PREFIX_ . 'target_catalog
        WHERE active = 1'
        );

        // Get selected catalogs based on bitwise value
        $selected_catalogs = array();
        if ($object->id && $object->target_catalog_value > 0) {
            foreach ($catalogs as $catalog) {
                if ($object->target_catalog_value & (int)$catalog['value']) {
                    $selected_catalogs[] = $catalog['id_target_catalog'];
                }
            }
        }


        $competitors = array();
        if ($object->id) {
            $competitors = TargetCompetitorRelation::getCompetitorsByTarget($object->id);
        }
        $this->fields_form = array(
            'legend' => array(
                'title' => $this->l('Target'),
                'icon' => 'icon-folder'
            ),
            'input' => array(
                array(
                    'type' => 'text',
                    'label' => $this->l('Name'),
                    'name' => 'name',
                    'form_group_class' => 'less-width-label',
                    'required' => true
                ),
                array(
                    'type' => 'text',
                    'label' => $this->l('URL'),
                    'name' => 'url',
                    'form_group_class' => 'less-width-label full-width expand-fix',
                    'required' => true
                ),
                array(
                    'type' => 'checkbox',
                    'label' => $this->l('Categories'),
                    'name' => 'catalogs',
                    'form_group_class' => 'less-width-label',
                    'required' => true,
                    'values' => array(
                        'query' => array_map(function ($catalog) {
                            return array(
                                'id_target_catalog' => $catalog['id_target_catalog'],
                                'name' => $catalog['name']
                            );
                        }, $catalogs),
                        'id' => 'id_target_catalog',
                        'name' => 'name'
                    ),
                    'expand' => array(
                        'print_total' => count($catalogs),
                        'default' => 'show',
                        'show' => array('text' => $this->l('Show Categories')),
                        'hide' => array('text' => $this->l('Hide Categories'))
                    )
                ),
                array(
                    'type' => 'competitors',
                    'name' => 'competitors',
                    'form_group_class' => 'competitors-group less-width-label'
                ),

                array(
                    'type' => 'switch',
                    'label' => $this->l('Status'),
                    'name' => 'active',
                    'form_group_class' => 'less-width-label',
                    'default_value' => 1,
                    'values' => array(
                        array('id' => 'active_on', 'value' => 1),
                        array('id' => 'active_off', 'value' => 0)
                    )
                )
            ),
            'submit' => array(
                'title' => $this->l('Save'),
                'class' => 'btn btn-default pull-right'
            )
        );
        $this->context->controller->addCSS($this->module->getPathUri() . 'views/css/admin.css');
        $list_competitors = Competitor::getAllCompetitors();
        $this->context->smarty->assign('list_competitors', $list_competitors);
        foreach ($catalogs as $catalog) {
            $this->fields_value['catalogs_' . $catalog['id_target_catalog']] =
                in_array($catalog['id_target_catalog'], $selected_catalogs);
        }


        $this->fields_value['competitors'] = $competitors;
        $this->tpl_form_vars['competitors'] = $competitors;

        return parent::renderForm(); // TODO: Change the autogenerated stub

    }

    /**
     * @param $id_lang
     * @param $order_by
     * @param $order_way
     * @param $start
     * @param $limit
     * @param $id_lang_shop
     * @return void
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     * This method retrieves the list of target websites from the database.
     * It applies the catalog filter if set and logs the SQL query for debugging.
     */
    public function getList($id_lang, $order_by = null, $order_way = null, $start = 0, $limit = null, $id_lang_shop = false)
    {
        if (Tools::getValue('catalog_filter')) {
            $this->processFilter();
        }

        parent::getList($id_lang, $order_by, $order_way, $start, $limit, $id_lang_shop);

        // Debug SQL query
        if (_PS_MODE_DEV_) {
            PrestaShopLogger::addLog(
                'Target List SQL: ' . $this->_list_sql,
                1,
                null,
                'Target',
                (int)$this->context->employee->id
            );
        }
    }

    /**
     * @return string The rendered list HTML
     * This method renders the list of target websites.
     * It applies the catalog filter before rendering the list.
     */
    public function renderList()
    {
        // Apply catalog filter before rendering
        $this->processFilter();

        $filter_html = $this->context->smarty->fetch(
            _PS_MODULE_DIR_ . 'target_tracking/views/templates/admin/catalog_filter.tpl'
        );

        return $filter_html . parent::renderList();
    }

    /**
     * @return void
     * This method processes the catalog filter.
     * It retrieves the selected categories and applies the filter to the SQL query.
     */
    public function processFilter()
    {
        parent::processFilter();

        $catalog_filter = (int)Tools::getValue('catalog_filter');
        if ($catalog_filter > 0) {
            // Using bitwise AND to check for exact match with selected categories
            $this->_where .= ' AND (a.target_catalog_value & ' . $catalog_filter . ') = ' . $catalog_filter;
        }
    }

    /**
     * @return TargetWebsite|bool The saved object or false on failure
     * This method processes the form submission for adding or editing target websites.
     * It saves the target website data and updates the competitors and categories.
     */
    public function processSave()
    {
        // Get the target website object
        $object = parent::processSave();
        if ($object) {
            $competitors = Tools::getValue('competitors', array());
            $newCompetitors = Tools::getValue('new_competitors', array());
            $deletedCompetitors = Tools::getValue('delete_competitors', array());

            // Update object logo
            $object->logo = $this->getFaviconUrl($object->url);

            // Delete marked competitors
            if (!empty($deletedCompetitors)) {
                foreach ($deletedCompetitors as $competitorId) {
                    Db::getInstance()->delete(
                        'target_competitor_relation',
                        'id_target = ' . (int)$object->id . ' AND id_competitor = ' . (int)$competitorId
                    );
                }
            }

            // Update existing competitors
            if (!empty($competitors)) {
                foreach ($competitors as $id => $competitor) {
                    if (!in_array($id, $deletedCompetitors)) {
                        Db::getInstance()->delete(
                            'target_competitor_relation',
                            'id_target = ' . (int)$object->id . ' AND id_competitor = ' . (int)$competitor['id_competitor']
                        );

                        Db::getInstance()->insert('target_competitor_relation', array(
                            'id_target' => (int)$object->id,
                            'id_competitor' => (int)$competitor['id_competitor'],
                            'priority' => (int)$competitor['priority']
                        ));
                    }
                }
            }

            // Insert new competitors
            if (!empty($newCompetitors)) {
                foreach ($newCompetitors as $competitor) {
                    if (!empty($competitor['id_competitor'])) {
                        Db::getInstance()->insert('target_competitor_relation', array(
                            'id_target' => (int)$object->id,
                            'id_competitor' => (int)$competitor['id_competitor'],
                            'priority' => (int)$competitor['priority']
                        ));
                    }
                }
            }


            $catalog_value = 0;
            // Get selected catalogs based on bitwise value
            $catalogs = Db::getInstance()->executeS('
            SELECT id_target_catalog, value 
            FROM ' . _DB_PREFIX_ . 'target_catalog 
            WHERE active = 1'
            );

            foreach ($catalogs as $catalog) {
                $checkbox_name = 'catalogs_' . $catalog['id_target_catalog'];
                if (Tools::getValue($checkbox_name)) {
                    $catalog_value |= (int)$catalog['value'];
                }
            }

            // Update target_catalog_value
            $object->target_catalog_value = $catalog_value;
            $object->update();

            return $object;
        }

        return $object;
    }

    /**
     * @param string $url The URL to get the favicon for
     * @return string The URL of the favicon
     * This method retrieves the favicon URL for a given website URL.
     * It uses Google's favicon service to get the favicon image.
     */
    private function getFaviconUrl($url)
    {
        $domain = parse_url($url, PHP_URL_HOST);
        if (!$domain) {
            $domain = $url;
        }
        return "https://www.google.com/s2/favicons?sz=128&domain=" . $domain;
    }

    /**
     * @param string $value The logo URL
     * @param array $row The row data
     * @return string The HTML for displaying the logo
     * This method generates the HTML for displaying the logo in the list.
     * It uses the getFaviconUrl method to get the favicon if the logo is empty.
     */
    public function displayLogo($value, $row)
    {
        if (empty($value)) {
            return '<img src="' . $this->getFaviconUrl($row['url']) . '" alt="Logo" style="width: 32px; height: 32px;" />';
        }
        return '<img src="' . $value . '" alt="Logo" style="width: 32px; height: 32px;" />';
    }

    /**
     * @param string $value The URL to display
     * @param array $row The row data
     * @return string The HTML for displaying the URL link
     * This method generates the HTML for displaying the URL link in the list.
     * It opens the link in a new tab when clicked.
     */
    public function displayURLLink($value, $row)
    {
        return '<a href="' . $value . '" target="_blank">' . htmlspecialchars($value) . '</a>';
    }

    /**
     * @param string $value The name of the target website
     * @param array $row The row data
     * @return string The HTML for displaying the target website name
     * This method generates the HTML for displaying the target website name in the list.
     * It links to the AdminTargettrackingproducts controller with the target website ID.
     */
    public function displayName($value, $row)
    {
        return '<a href="' . $this->context->link->getAdminLink('AdminTargettrackingproducts', true, [], [
                'id_target_website' => $row['id_target_website']
            ]) . '">' . ucfirst(strtolower($value)) . '</a>';
    }


}
